@startuml





/' Objects '/

class Host {
	+Host()
	+Host(std::string hostname, uint16_t port)
	+Host(uint32_t port)
	+Host(std::string hostname)
	-_hostname : std::string
	+getHostname() : std::string {query}
	-_port : uint16_t
	+getPort() : uint16_t {query}
	+setHostname(std::string hostname) : void
	+setPort(uint16_t port) : void
}


class Location {
	+Location()
	-_returnDirective : ReturnDirective
	+getReturnDirective() : ReturnDirective& {query}
	-_action : action
	+getAction() : action {query}
	-_autoindex : bool
	-_hasAutoindex : bool
	-_hasClientMaxBodySize : bool
	-_hasReturnDirective : bool
	+getAutoindex() : bool {query}
	+hasAutoindex() : bool {query}
	+hasClientMaxBodySize() : bool {query}
	+hasLimitExceptMethod(const std::string& method) : bool {query}
	+hasReturnDirective() : bool {query}
	+isMatchExtentionFile() : bool {query}
	-_index : ft::filesystem::path
	-_root : ft::filesystem::path
	+getIndex() : ft::filesystem::path {query}
	+getRoot() : ft::filesystem::path {query}
	-_clientMaxBodySize : size_t
	+getClientMaxBodySize() : size_t {query}
	+getCgiParams() : std::map<std::string , std::string>&
	-_cgiParams : std::map<std::string, std::string>
	-_limitExceptMethods : std::set<std::string>
	+getLimitExceptMethods() : std::set<std::string>&
	-_cgiExec : std::string
	-_extentionFile : std::string
	-_uri : std::string
	+getCgiExec() : std::string {query}
	+getCgiParam(std::string param) : std::string
	+getExtentionFile() : std::string {query}
	+getUri() : std::string {query}
	-_setAction(action) : void
	+addCgiParam(const std::string& name, const std::string& value) : void
	+addCgiParam(const std::pair<std::string, std::string> pair) : void
	+addLimitExceptMethod(const std::string& method) : void
	+addLimitExceptMethods(const std::set<std::string>& l) : void
	+setAutoindex(bool autoindex) : void
	+setCgiExec(const std::string& exec) : void
	+setClientMaxBodySize(size_t size) : void
	+setExtentionFile(std::string ext) : void
	+setIndex(ft::filesystem::path index) : void
	+setReturnDirective(const ReturnDirective& returnDirective) : void
	+setRoot(ft::filesystem::path root) : void
	+setUri(std::string uri) : void
}


class ReturnDirective {
	+ReturnDirective()
	-_uri : Uri
	+getUri() : Uri& {query}
	+hasCode() : bool {query}
	+hasText() : bool {query}
	+hasUri() : bool {query}
	-_text : std::string
	+getText() : std::string& {query}
	-_code : u_short
	+getCode() : u_short {query}
	+setCode(u_short code) : void
	+setText(const std::string& text) : void
	+setUri(const std::string& uri) : void
}


class ServerBlock {
	+ServerBlock()
	+getListen(uint32_t index) : Host& {query}
	+findLocation(const Uri& uri) : Location& {query}
	-_getLocationIfMatchExtention(const Uri& uri) : Location* {query}
	+findExactLocation(const Uri& uri) : Location* {query}
	-_autoindex : bool
	-_hasAutoindex : bool
	-_hasClientMaxBodySize : bool
	+getAutoindex() : bool {query}
	+hasAutoindex() : bool {query}
	+hasClientMaxBodySize() : bool {query}
	-_index : ft::filesystem::path
	-_root : ft::filesystem::path
	-_uploadStore : ft::filesystem::path
	+getIndex() : ft::filesystem::path {query}
	+getRoot() : ft::filesystem::path {query}
	+getUploadStore() : ft::filesystem::path {query}
	-_clientMaxBodySize : size_t
	+getClientMaxBodySize() : size_t {query}
	+getErrors() : std::map<u_short , std::string>&
	-_errors : std::map<u_short, std::string>
	+getPathFromUri(const Uri& uri) : std::pair<const Location* , ft::filesystem::path> {query}
	-_serverName : std::string
	+getServerName() : std::string {query}
	-_listens : std::vector<Host>
	+getListens() : std::vector<Host>&
	-_locations : std::vector<Location>
	+getLocations() : std::vector<Location>&
	+addError(u_short code, const std::string& path) : void
	+addErrors(const std::map<u_short, std::string>& errors) : void
	+addListen(Host listen) : void
	+addLocation(Location location) : void
	+setAutoindex(bool autoindex) : void
	+setClientMaxBodySize(size_t size) : void
	+setIndex(ft::filesystem::path index) : void
	+setReturnDirective(const ReturnDirective& returnDirective) : void
	+setRoot(ft::filesystem::path root) : void
	+setServerName(std::string serverName) : void
	+setUploadStore(ft::filesystem::path path) : void
}


class ServerConfig {
	-ServerConfig(const ft::filesystem::path& filepath, const ft::filesystem::path& mimePath)
	-ServerConfig(ServerConfig &)
	-_parseHost(config::ScannerConfig& scanner) : Host
	-_parseListen(config::ScannerConfig& scanner) : Host
	-_parseListenValue(const config::Token& host) : Host
	-_parseLocation(config::ScannerConfig& scanner, config::Token locationToken) : Location
	+findLocation(const Uri& uri) : Location&
	-_parseReturn(config::ScannerConfig& scanner) : ReturnDirective
	-_parseServer(config::ScannerConfig& scanner, config::Token serverToken) : ServerBlock
	+findServer(const Uri& uri) : ServerBlock&
	+getServer(uint32_t index) : ServerBlock&
	+{static} getInstance(const ft::filesystem::path& filepath, const ft::filesystem::path& mimePath) : ServerConfig&
	+{static} getInstance() : ServerConfig&
	-operator=(const ServerConfig &) : ServerConfig&
	-_parseAutoindex(config::ScannerConfig& scanner) : bool
	-_configFilePath : ft::filesystem::path
	-_parseIndex(config::ScannerConfig& scanner) : ft::filesystem::path
	-_parseRoot(config::ScannerConfig& scanner) : ft::filesystem::path
	-_parseUploadStore(config::ScannerConfig& scanner) : ft::filesystem::path
	+getConfigFilePath() : ft::filesystem::path {query}
	+getPathFromUri(const Uri& uri) : ft::filesystem::path
	-_parseClientMaxBodySize(config::ScannerConfig& scanner) : size_t
	-{static} _singleton : static ServerConfig*
	-_parseMimeFile(const ft::filesystem::path& path) : std::map<std::string , std::string>
	-_mime : std::map<std::string, std::string>
	-_parseErrorPage(config::ScannerConfig& scanner) : std::map<u_short , std::string>
	-_parseCgiParam(config::ScannerConfig& scanner) : std::pair<std::string , std::string>
	-_parseLimitExceptMethods(config::ScannerConfig& scanner) : std::set<std::string>
	-_parseCgiExec(config::ScannerConfig& scanner) : std::string
	-_parseServerName(config::ScannerConfig& scanner) : std::string
	+getMime(const std::string& extension) : std::string
	-_servers : std::vector<ServerBlock>
	+getServers() : std::vector<ServerBlock>& {query}
	+getPorts() : std::vector<uint32_t>
	+{static} __delete_singleton_instance() : void
	-_checkNoDupplicatePortListen(ServerBlock& server, config::Token tokenListen) : void
	-_parse(std::istream &) : void
	-_postCheckAtLeastOneServerIsDefined() : void
	-_postParser() : void
	-_postParserSetAutoindexInChilds() : void
	-_postParserSetClientMaxBodySizeInChilds() : void
	-_postParserSetDefaultServerLocation() : void
	-_postParserSetLimitExcept() : void
	-_skipSemiColonNewLine(config::ScannerConfig& scanner) : void
	-_throw_SyntaxError(config::Token t, const std::string& error_str, const ft::filesystem::path& file) : void
}


class SyntaxError {
	+SyntaxError()
	+SyntaxError(const char* message)
	+SyntaxError(const std::string& message)
	+~SyntaxError()
	+what() : char*
	#_message : std::string
}


class Uri {
	+Uri()
	+Uri(const std::string& uri)
	+Uri(const char* uri)
	+Uri(const std::string& scheme, const std::string& pathEtc)
	+Uri(const std::string& scheme, const std::string& authority, const std::string& pathEtc)
	+Uri(const std::string& scheme, const std::string& authority, const std::string& path, const std::string& query)
	+Uri(const std::string& scheme, const std::string& authority, const std::string& path, const std::string& query, const std::string& fragment)
	+Uri(const Uri &)
	+~Uri()
	+operator=(const Uri &) : Uri&
	+empty() : bool {query}
	+isRelative() : bool {query}
	+isWellKnownPort() : bool {query}
	-operator==(const Uri& lhs, const Uri& rhs) : bool
	+getPath() : ft::filesystem::path {query}
	-_fragment : std::string
	-_host : std::string
	-_path : std::string
	-_query : std::string
	-_scheme : std::string
	-_userInfo : std::string
	+decode(std::string s) : std::string {query}
	+getAuthority() : std::string {query}
	+getFragment() : std::string
	+getHost() : std::string {query}
	+getPathAndQuery() : std::string {query}
	+getPathEtc() : std::string {query}
	+getQuery() : std::string {query}
	+getRawQuery() : std::string
	+getScheme() : std::string
	+getUserInfo() : std::string
	+toString() : std::string {query}
	-_port : u_short
	+getPort() : u_short {query}
	+getSpecifiedPort() : u_short
	+getWellKnownPort() : u_short {query}
	-_parseAuthority(std::string::const_iterator& it, const std::string::const_iterator& end) : void
	-_parseHostAndPort(std::string::const_iterator& it, const std::string::const_iterator& end) : void
	-_parsePathEtc(std::string::const_iterator& it, const std::string::const_iterator& end) : void
	-_parseUri(const std::string& uri) : void
	+clear() : void
	+setAuthority(const std::string &) : void
	+setFragment(const std::string &) : void
	+setHost(const std::string &) : void
	+setPath(const std::string &) : void
	+setPathEtc(const std::string &) : void
	+setPort(u_short) : void
	+setQuery(const std::string &) : void
	+setRawQuery(const std::string &) : void
	+setScheme(const std::string &) : void
	+setSpecifiedPort(u_short) : void
	+setUserInfo(const std::string &) : void
}


enum action::actionEnum {
	cgi
	none
	returnDirective
}


class Context {
	+Context(ServerBlock& server, const Location& location, const fs::path path, const Uri& uri)
	+server : ServerBlock&
	+uri : Uri
	+location : const Location&
	+path : ft::filesystem::path
}


class action {
	+action(actionEnum e)
	-_e : actionEnum
	+operator!=(const action& lhs, const action& rhs) : bool
	+operator==(const action& lhs, const action& rhs) : bool
}


namespace web {
	class Device {
		+Device()
		+~Device()
		-_socket : Socket
		+getSocket() : Socket&
		+bindSocket() : bool
		+listenSocket() : bool
		+setNonBlocking() : bool
		+setReusableAddr() : bool
		-_inputBuffer : buffer_type
		-_outputBuffer : buffer_type
		+getInputBuffer() : buffer_type&
		+getOutputBuffer() : buffer_type&
		-_port : port_type
		+getPort() : port_type
		-_requests : requests_queue_type
		+getRequestsQueue() : requests_queue_type&
		-_responses : responses_queue_type
		+getResponsesQueue() : responses_queue_type&
		+closeSocket() : void
		+setPort(port_type port) : void
	}

	class Server {
		-Server(const Server& ref)
		+Server()
		+~Server()
		-_isServerIndex(int deviceIndex) : bool
		+setup() : bool
		-_firstClientIndex : int
		-_nfds : int
		-_devices : std::vector<Device>
		-_fds : struct pollfd
		-_buildRequests(int deviceIndex) : void
		-_buildResponses(int deviceIndex) : void
		-_connectClients(int servrIndex) : void
		-_disconnectDevice(int deviceIndex) : void
		-_getRequests(int deviceIndex) : void
		-_log(int fd, std::string description) : void
		-_sendResponses(int deviceIndex) : void
		+routine() : void
		+stop(int status) : void
	}

	class Socket {
		+Socket()
		+~Socket()
		-_addrLen : addrLen_type
		+getAddrLen() : addrLen_type {query}
		-_addr : addr_type
		+getAddr() : addr_type {query}
		+setFd(int domain, int type) : bool
		-_fd : fd_type
		+getFd() : fd_type {query}
		+getIp() : std::string
		+setAddr(int domain, int interface, int port) : void
		+setAddr(const addr_type& addr) : void
		+setFd(fd_type fd) : void
	}
}


namespace parser {
	namespace http {
		class ScannerMessage {
			-ScannerMessage()
			+ScannerMessage(std::vector<unsigned char>& buffer)
			+~ScannerMessage()
			-_makeToken(TokenKind kind, std::string value) : Token
			+getToken(bool skipLWS) : Token
			-_charIsString(char c) : bool
			-_scan : ft::scanner::ScannerBuffer
			+remainCharCount() : size_t
			+getChar() : unsigned char
			+eraseBeforeCurrentIndex() : void
		}

		enum TokenKind::TokenKindEnum {
			kCarriage
			kColon
			kComma
			kEndOfInput
			kError
			kLWS
			kLeftBrace
			kNewLine
			kRightBrace
			kString
		}

		class Token {
			+Token()
			+kind : TokenKind
			+value : std::string
		}

		class TokenKind {
			+TokenKind(TokenKindEnum e)
			+TokenKind(unsigned int e)
			-_e : TokenKindEnum
			+operator!=(const TokenKind& lhs, const TokenKind& rhs) : bool
			+operator==(const TokenKind& lhs, const TokenKind& rhs) : bool
			+getValue() : int {query}
		}
	}
}


namespace http {
	class Message {
		+Message()
		+~Message()
		+empty() : bool {query}
		#_content : content_type
		+getContent() : content_type&
		#_headers : headers_type
		+getHeaders() : headers_type&
		+getContentLength() : size_t
		#_version : std::string
		+getHeader(std::string name) : std::string
		+getVersion() : std::string
		+clear() : void
		+delHeader(std::string name) : void
		+setContent(const content_type& content) : void
		+setContent(const content_type& content, std::string contentType) : void
		+setHeader(std::string key, std::string val) : void
		+setVersion(const std::string& version) : void
	}

	class Request {
		+Request()
		+~Request()
		-_uri : Uri
		+getUri() : Uri&
		+empty() : bool {query}
		-_method : std::string
		+getMethod() : std::string
		+clear() : void
		+setMethod(std::string method) : void
		+setUri(const Uri& uri) : void
	}

	class Response {
		+Response()
		+~Response()
		-_status : Status
		+getStatus() : Status&
		+empty() : bool {query}
		+clear() : void
		+setStatus(Status e) : void
	}

	enum Status::StatusEnum {
		Accepted
		AlreadyReported
		BadGateway
		BadRequest
		Conflict
		Continue
		Created
		EarlyHints
		EndOfInput
		ExpectationFailed
		FailedDependency
		Forbidden
		Found
		GatewayTimeout
		Gone
		HTTPVersionNotSupported
		IMUsed
		ImATeapot
		InsufficientStorage
		InternalServerError
		LengthRequired
		Locked
		LoopDetected
		MethodNotAllowed
		MovedPermanently
		MultiStatus
		MultipleChoices
		NetworkAuthenticationRequired
		NoContent
		NonAuthoritativeInformation
		None
		NotAcceptable
		NotExtended
		NotFound
		NotImplemented
		NotModified
		OK
		PartialContent
		PayloadTooLarge
		PaymentRequired
		PermanentRedirect
		PreconditionFailed
		PreconditionRequired
		Processing
		ProxyAuthenticationRequired
		RangeNotSatisfiable
		RequestHeaderFieldsTooLarge
		RequestTimeout
		ResetContent
		SeeOther
		ServiceUnavailable
		SwitchingProtocols
		TemporaryRedirect
		TooManyRequests
		URITooLong
		Unauthorized
		UnavailableForLegalReasons
		UnprocessableEntity
		UnsupportedMediaType
		UpgradeRequired
		UseProxy
		VariantAlsoNegotiates
	}

	class Status {
		+Status()
		+Status(StatusEnum e)
		+Status(unsigned int e)
		+~Status()
		-_e : StatusEnum
		+operator!=(const Status& lhs, const Status& rhs) : bool
		+operator<(const Status& lhs, const Status& rhs) : bool
		+operator<=(const Status& lhs, const Status& rhs) : bool
		+operator==(const Status& lhs, const Status& rhs) : bool
		+operator>(const Status& lhs, const Status& rhs) : bool
		+operator>=(const Status& lhs, const Status& rhs) : bool
		+getValue() : int {query}
		+getDefinition() : std::string {query}
		+setValue(StatusEnum e) : void
		+setValue(int e) : void
	}

	class multipart_part {
		+len : size_t
		+headers : std::map<std::string, std::string>
		+getFilename() : std::string {query}
		+content : unsigned char*
	}
}


namespace html {
	class Builder {
		+Builder(const std::string& rootName)
		+Builder(const std::string& rootName, const std::string& rootContent)
		+operatorElement()
		+addAttribute(const std::string& name, const std::string& value) : Builder*
		+addAttribute(const Attribute& attribute) : Builder*
		+addChild(const std::string& name, const std::string& content) : Builder*
		+addChild(const Element& elem) : Builder*
		+addChild(const Builder* b) : Builder*
		+addChild(std::string name, Element child) : Builder*
		-_root : Element
		+str() : std::string
	}

	class Element {
		-Element()
		-Element(const std::string& name, const std::string& content)
		-Element(const std::string& name, const Element& child)
		-_attributesToString() : std::string
		-_content : std::string
		-_name : std::string
		+str(size_t depth) : std::string
		-_attributes : std::vector<Attribute>
		-_children : std::vector<Element>
	}

	class Attribute {
		+Attribute(const std::string& name, const std::string& value)
		+name : std::string
		+value : std::string
	}
}


namespace ft {
	class error_code {
		+error_code()
		+error_code(int errc)
		+operatorbool()
		+operator=(int e) : error_code&
		-_val : int
		+value() : int
		+message() : std::string {query}
		+assign(int val) : void
		+clear() : void
	}

	class shared_ptr <template<class T>> {
		+shared_ptr()
		+shared_ptr(T* pointer)
		+shared_ptr(const shared_ptr& other)
		+~shared_ptr()
		+operator*() : T& {query}
		-_ptr : T*
		+get() : T* {query}
		+operator->() : T* {query}
		+operator=(const shared_ptr& other) : shared_ptr&
		+getReferenceCount() : size_t {query}
		-_refCount : size_t*
		-_clear() : void
	}

	enum errc::errcEnum {
		address_family_not_supported
		address_in_use
		address_not_available
		already_connected
		argument_list_too_long
		argument_out_of_domain
		bad_address
		bad_file_descriptor
		bad_message
		broken_pipe
		connection_aborted
		connection_already_in_progress
		connection_refused
		connection_reset
		cross_device_link
		destination_address_required
		device_or_resource_busy
		directory_not_empty
		executable_format_error
		file_exists
		file_too_large
		filename_too_long
		function_not_supported
		host_unreachable
		identifier_removed
		illegal_byte_sequence
		inappropriate_io_control_operation
		interrupted
		invalid_argument
		invalid_seek
		io_error
		is_a_directory
		message_size
		network_down
		network_reset
		network_unreachable
		no_buffer_space
		no_child_process
		no_link
		no_lock_available
		no_message
		no_message_available
		no_protocol_option
		no_space_on_device
		no_stream_resources
		no_such_device
		no_such_device_or_address
		no_such_file_or_directory
		no_such_process
		none
		not_a_directory
		not_a_socket
		not_a_stream
		not_connected
		not_enough_memory
		not_supported
		operation_canceled
		operation_in_progress
		operation_not_permitted
		operation_not_supported
		operation_would_block
		owner_dead
		permission_denied
		protocol_error
		protocol_not_supported
		read_only_file_system
		resource_deadlock_would_occur
		resource_unavailable_try_again
		result_out_of_range
		state_not_recoverable
		stream_timeout
		text_file_busy
		timed_out
		too_many_files_open
		too_many_files_open_in_system
		too_many_links
		too_many_symbolic_link_levels
		value_too_large
		wrong_protocol_type
	}

	class errc {
		+errc(errcEnum e)
		+operatorerrcEnum()
		+operator==(const errc& lhs, const errc& rhs) : bool
		-_e : errcEnum
	}

	namespace scanner {
		class ScannerBuffer {
			-ScannerBuffer()
			+ScannerBuffer(std::vector<unsigned char>& buffer)
			+~ScannerBuffer()
			-_idx : size_t
			+remainCharCount() : size_t
			+toString() : std::string
			-_buffer : std::vector<unsigned char>&
			-_c : unsigned char
			+get() : unsigned char
			+eraseBeforeCurrentIndex() : void
			+unget() : void
		}

		class ScannerStream {
			-ScannerStream()
			+ScannerStream(std::istream& inputStream)
			+~ScannerStream()
			-_c : char
			+get() : char
			-_column : int
			-_lastColumn : int
			-_line : int
			+getColumn() : int
			+getLine() : int
			-_inStream : std::istream&
			-moveBackward(char charToPutBack) : void
			-moveForward() : void
			+putback(char c) : void
		}
	}

	namespace filesystem {
		class directory_entry {
			+directory_entry()
			+directory_entry(const directory_entry &)
			+directory_entry(const path& p)
			+directory_entry(const path& p, ::ft::error_code& ec)
			+operatorconstclasspath&()
			+~directory_entry()
			+exists() : bool {query}
			+exists(error_code& ec) : bool
			+is_block_file() : bool {query}
			+is_block_file(error_code& ec) : bool
			+is_character_file() : bool {query}
			+is_character_file(error_code& ec) : bool
			+is_directory() : bool {query}
			+is_directory(error_code& ec) : bool
			+is_fifo() : bool {query}
			+is_fifo(error_code& ec) : bool
			+is_other() : bool {query}
			+is_other(error_code& ec) : bool
			+is_regular_file() : bool {query}
			+is_regular_file(error_code& ec) : bool
			+is_socket() : bool {query}
			+is_socket(error_code& ec) : bool
			+is_symlink() : bool {query}
			+is_symlink(error_code& ec) : bool
			-_path : class path
			+operator=(const directory_entry &) : directory_entry&
			-_status : file_status
			+status() : file_status {query}
			+status(error_code& ec) : file_status
			+getPath() : path&
			-_fileSize : uintmax_t
			-_hardLinkCount : uintmax_t
			+file_size() : uintmax_t {query}
			+file_size(error_code& ec) : uintmax_t
			+hard_link_count() : uintmax_t {query}
			+hard_link_count(error_code& ec) : uintmax_t
			+assign(const path& p) : void
			+assign(const path& p, error_code& ec) : void
			+refresh() : void
			+refresh(error_code& ec) : void
		}

		class directory_iterator {
			+directory_iterator()
			+directory_iterator(const path& p)
			+directory_iterator(const path& p, directory_options options)
			+directory_iterator(const path& p, error_code& ec)
			+directory_iterator(const path& p, directory_options options, error_code& ec)
			+directory_iterator(const directory_iterator& other)
			+~directory_iterator()
			+operator!=(const directory_iterator& other) : bool {query}
			+operator==(const directory_iterator& other) : bool {query}
			+operator*() : directory_entry& {query}
			+operator->() : directory_entry* {query}
			+operator++() : directory_iterator&
			+operator=(const directory_iterator& other) : directory_iterator&
			-_impl : shared_ptr<impl>
		}

		class directory_iterator::impl {
			-impl(const impl& other)
			+impl(const path& p, directory_options options)
			+~impl()
			+_dirp : DIR*
			+_dirEntry : directory_entry
			+_options : directory_options
			+_ec : error_code
			+_basePath : path
			+_dirent : struct dirent*
			-_copyEntryFromDirent() : void
			+increment(error_code& ec) : void
		}

		class file_status {
			+file_status()
			+file_status(const file_status &)
			+file_status(file_type ft, perms prms)
			+~file_status()
			+operator==(const file_status& lhs, const file_status& rhs) : bool
			+operator=(const file_status &) : file_status&
			-_type : file_type
			+type() : file_type
			-_perms : perms
			+permissions() : perms
			+permissions(perms prms) : void
			+type(file_type ft) : void
		}

		class filesystem_error {
			+filesystem_error(const std::string& what_arg, ft::error_code ec)
			+filesystem_error(const std::string& what_arg, const path& p1, ft::error_code ec)
			+filesystem_error(const std::string& what_arg, const path& p1, const path& p2, ft::error_code ec)
			+filesystem_error(const filesystem_error& other)
			+~filesystem_error()
			+what() : char*
			-_code : ft::error_code
			+code() : ft::error_code&
			-_path1 : path
			-_path2 : path
			+path1() : path&
			+path2() : path&
		}

		class path {
			+operatorstring_type() {query}
			+path()
			+path(const path& other)
			+path(const string_type& p)
			+path(const char* p)
			+~path()
			+empty() : bool
			+has_extension() : bool {query}
			+has_filename() : bool {query}
			+has_parent_path() : bool {query}
			+has_relative_path() : bool {query}
			+has_root_directory() : bool {query}
			+has_root_path() : bool {query}
			+has_stem() : bool {query}
			+is_absolute() : bool {query}
			+is_relative() : bool {query}
			-operator<(const path& lhs, const path& rhs) : bool
			-operator==(const path& lhs, const path& rhs) : bool
			+c_str() : char*
			+compare(const path& p) : int
			+compare(const string_type& s) : int {query}
			+compare(const char* s) : int {query}
			+begin() : iterator {query}
			+end() : iterator {query}
			+extension() : path {query}
			+filename() : path {query}
			+lexically_normal() : path {query}
			+lexically_proximate(const path& base) : path {query}
			+lexically_relative(const path& base) : path {query}
			+parent_path() : path {query}
			+relative_path() : path {query}
			+root_directory() : path {query}
			+root_path() : path {query}
			+stem() : path {query}
			+concat(const Source& x) : path&
			+concat(InputIterator first, InputIterator last) : path&
			+operator+=(const path& x) : path&
			+operator+=(const string_type& x) : path&
			+operator+=(const char* x) : path&
			+operator+=(char x) : path&
			+operator/=(const path& p) : path&
			+operator=(const path& p) : path&
			+operator=(const string_type& p) : path&
			+remove_filename() : path&
			+replace_extension(const path& replacement) : path&
			+replace_filename(const path& replacement) : path&
			+string() : std::string {query}
			-_splitPath() : std::vector<string_type>
			-_path : string_type
			+native() : string_type&
			-_formatPathInPlace() : void
			+clear() : void
			+swap(path& rhs) : void
		}

		class path::iterator {
			+iterator()
			+iterator(const path& p, const std::string::const_iterator& pos)
			+operator!=(const iterator& other) : bool {query}
			+operator==(const iterator& other) : bool {query}
			+operator++(int) : iterator
			+operator--(int) : iterator
			+operator++() : iterator&
			+operator--() : iterator&
			-_cur : path
			+operator->() : pointer {query}
			+operator*() : reference {query}
			-_first : string_type::const_iterator
			-_iter : string_type::const_iterator
			-_last : string_type::const_iterator
			-decrement(const string_type::const_iterator& pos) : string_type::const_iterator {query}
			-increment(const string_type::const_iterator& pos) : string_type::const_iterator {query}
			-_updateCurrent() : void
		}

		enum directory_options::directory_optionsEnum {
			follow_directory_symlink
			none
			skip_permission_denied
		}

		enum file_type::file_typeEnum {
			block
			character
			directory
			fifo
			none
			not_found
			regular
			socket
			symlink
			unknown
		}

		enum perms::permsEnum {
			all
			group_all
			group_exec
			group_read
			group_write
			mask
			none
			others_all
			others_exec
			others_read
			others_write
			owner_all
			owner_exec
			owner_read
			owner_write
			set_gid
			set_uid
			sticky_bit
			unknown
		}

		class directory_options {
			+directory_options(directory_optionsEnum e)
			+directory_options(unsigned int e)
			+operator!=(const directory_options& lhs, const directory_options& rhs) : bool
			+operator==(const directory_options& lhs, const directory_options& rhs) : bool
			+operator&(directory_options x, directory_options y) : directory_options
			+operator^(directory_options x, directory_options y) : directory_options
			+operator|(directory_options x, directory_options y) : directory_options
			+operator~(directory_options x) : directory_options
			-_e : directory_optionsEnum
		}

		class file_type {
			+file_type(file_typeEnum e)
			+operator!=(const file_type& lhs, const file_type& rhs) : bool
			+operator==(const file_type& lhs, const file_type& rhs) : bool
			-_e : file_typeEnum
		}

		class perms {
			+perms(permsEnum e)
			+perms(unsigned int e)
			+operator==(const perms& lhs, const perms& rhs) : bool
			+operator&(perms x, perms y) : perms
			+operator^(perms x, perms y) : perms
			+operator|(perms x, perms y) : perms
			+operator~(perms x) : perms
			-_e : permsEnum
		}
	}
}


namespace config {
	class ScannerConfig {
		+ScannerConfig(std::istream& inputStream)
		+~ScannerConfig()
		-_makeToken(TokenKind kind, std::string value) : Token
		-_makeToken(TokenKind kind, std::string value, int column, int line) : Token
		+getToken(bool skipNL) : Token
		-_charIsString(char c) : bool
		-_scan : ft::scanner::ScannerStream
	}

	enum TokenKind::TokenKindEnum {
		kColon
		kComma
		kComment
		kEndOfInput
		kError
		kInteger
		kLeftBrace
		kNewLine
		kRightBrace
		kSemiColon
		kString
	}

	class Token {
		+Token()
		+kind : TokenKind
		+column : int
		+line : int
		+value : std::string
	}

	class TokenKind {
		+TokenKind(TokenKindEnum e)
		+TokenKind(unsigned int e)
		-_e : TokenKindEnum
		+operator!=(const TokenKind& lhs, const TokenKind& rhs) : bool
		+operator==(const TokenKind& lhs, const TokenKind& rhs) : bool
		+getValue() : int {query}
	}
}





/' Inheritance relationships '/

http.Message <|-- http.Request


http.Message <|-- http.Response





/' Aggregation relationships '/

html.Builder *-- html.Element


.Context *-- .Location


.Context *-- .ServerBlock


.Context *-- .Uri


.Context *-- ft.filesystem.path


web.Device *-- web.Socket


html.Element *-- html.Attribute


html.Element *-- html.Element


.Location *-- .ReturnDirective


.Location *-- .action


.Location "2" *-- ft.filesystem.path


http.Request *-- .Uri


http.Response *-- http.Status


.ReturnDirective *-- .Uri


config.ScannerConfig *-- ft.scanner.ScannerStream


parser.http.ScannerMessage *-- ft.scanner.ScannerBuffer


web.Server *-- web.Device


.ServerBlock *-- .Host


.ServerBlock *-- .Location


.ServerBlock "3" *-- ft.filesystem.path


.ServerConfig *-- .ServerBlock


.ServerConfig o-- .ServerConfig


.ServerConfig *-- ft.filesystem.path


parser.http.Token "4" *-- parser.http.TokenKind


ft.filesystem.directory_entry *-- ft.filesystem.file_status


ft.filesystem.directory_entry *-- ft.filesystem.path


ft.filesystem.directory_iterator *-- ft.shared_ptr


ft.filesystem.directory_iterator::impl *-- ft.filesystem.directory_entry


ft.filesystem.directory_iterator::impl *-- ft.filesystem.directory_options


ft.filesystem.directory_iterator::impl *-- ft.error_code


ft.filesystem.directory_iterator::impl *-- ft.filesystem.path


ft.filesystem.file_status *-- ft.filesystem.file_type


ft.filesystem.file_status *-- ft.filesystem.perms


ft.filesystem.filesystem_error *-- ft.error_code


ft.filesystem.filesystem_error "2" *-- ft.filesystem.path


ft.filesystem.path::iterator *-- ft.filesystem.path






/' Dependency relationships '/

html.Attribute <.. html.Builder


html.Builder <.. html.Builder


html.Element <.. html.Builder


html.Element <.. html.Builder


html.Element <.. html.Element


.Host <.. .ServerBlock


.Location <.. .Context


.Location <.. .ServerBlock


.ReturnDirective <.. .Location


.ReturnDirective <.. .ServerBlock


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


config.ScannerConfig <.. .ServerConfig


web.Server <.. web.Server


web.Server <.. .ServerConfig


.ServerBlock <.. .Context


.ServerBlock <.. .ServerConfig


http.Status <.. http.Response


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


http.Status <.. http.Status


parser.http.Token <.. .ServerConfig


parser.http.Token <.. .ServerConfig


parser.http.Token <.. .ServerConfig


parser.http.Token <.. .ServerConfig


parser.http.Token <.. .ServerConfig


parser.http.TokenKind <.. config.ScannerConfig


parser.http.TokenKind <.. config.ScannerConfig


parser.http.TokenKind <.. parser.http.ScannerMessage


parser.http.TokenKind <.. parser.http.TokenKind


parser.http.TokenKind <.. parser.http.TokenKind


parser.http.TokenKind <.. parser.http.TokenKind


parser.http.TokenKind <.. parser.http.TokenKind


parser.http.TokenKind <.. parser.http.TokenKind


parser.http.TokenKind <.. config.TokenKind


parser.http.TokenKind <.. config.TokenKind


parser.http.TokenKind <.. config.TokenKind


parser.http.TokenKind <.. config.TokenKind


parser.http.TokenKind <.. config.TokenKind


.Uri <.. .Context


.Uri <.. http.Request


.Uri <.. .ServerBlock


.Uri <.. .ServerBlock


.Uri <.. .ServerBlock


.Uri <.. .ServerBlock


.Uri <.. .ServerConfig


.Uri <.. .ServerConfig


.Uri <.. .ServerConfig


.Uri <.. .Uri


.Uri <.. .Uri


.Uri <.. .Uri


.Uri <.. .Uri


.action <.. .Location


.action <.. .action


.action <.. .action


.action <.. .action


.action <.. .action


.action <.. .action


ft.filesystem.directory_entry <.. ft.filesystem.directory_entry


ft.filesystem.directory_entry <.. ft.filesystem.directory_entry


ft.filesystem.directory_iterator <.. ft.filesystem.directory_iterator


ft.filesystem.directory_iterator <.. ft.filesystem.directory_iterator


ft.filesystem.directory_iterator <.. ft.filesystem.directory_iterator


ft.filesystem.directory_iterator <.. ft.filesystem.directory_iterator


ft.filesystem.directory_options <.. ft.filesystem.directory_iterator


ft.filesystem.directory_options <.. ft.filesystem.directory_iterator


ft.filesystem.directory_options <.. ft.filesystem.directory_iterator::impl


ft.filesystem.directory_options <.. ft.filesystem.directory_options


ft.filesystem.directory_options <.. ft.filesystem.directory_options


ft.filesystem.directory_options <.. ft.filesystem.directory_options


ft.filesystem.directory_options <.. ft.filesystem.directory_options


ft.filesystem.directory_options <.. ft.filesystem.directory_options


ft.errc <.. ft.errc


ft.errc <.. ft.errc


ft.errc <.. ft.errc


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_entry


ft.error_code <.. ft.filesystem.directory_iterator


ft.error_code <.. ft.filesystem.directory_iterator


ft.error_code <.. ft.filesystem.directory_iterator::impl


ft.error_code <.. ft.filesystem.filesystem_error


ft.error_code <.. ft.filesystem.filesystem_error


ft.error_code <.. ft.filesystem.filesystem_error


ft.filesystem.file_status <.. ft.filesystem.file_status


ft.filesystem.file_status <.. ft.filesystem.file_status


ft.filesystem.file_status <.. ft.filesystem.file_status


ft.filesystem.file_status <.. ft.filesystem.file_status


ft.filesystem.file_type <.. ft.filesystem.file_status


ft.filesystem.file_type <.. ft.filesystem.file_status


ft.filesystem.file_type <.. ft.filesystem.file_type


ft.filesystem.file_type <.. ft.filesystem.file_type


ft.filesystem.file_type <.. ft.filesystem.file_type


ft.filesystem.file_type <.. ft.filesystem.file_type


ft.filesystem.file_type <.. ft.filesystem.file_type


ft.filesystem.filesystem_error <.. ft.filesystem.filesystem_error


ft.filesystem.path <.. .Context


ft.filesystem.path <.. .Location


ft.filesystem.path <.. .Location


ft.filesystem.path <.. .ServerBlock


ft.filesystem.path <.. .ServerBlock


ft.filesystem.path <.. .ServerBlock


ft.filesystem.path <.. .ServerConfig


ft.filesystem.path <.. .ServerConfig


ft.filesystem.path <.. .ServerConfig


ft.filesystem.path <.. .ServerConfig


ft.filesystem.path <.. .ServerConfig


ft.filesystem.path <.. .ServerConfig


ft.filesystem.path <.. ft.filesystem.directory_entry


ft.filesystem.path <.. ft.filesystem.directory_entry


ft.filesystem.path <.. ft.filesystem.directory_entry


ft.filesystem.path <.. ft.filesystem.directory_entry


ft.filesystem.path <.. ft.filesystem.directory_iterator


ft.filesystem.path <.. ft.filesystem.directory_iterator


ft.filesystem.path <.. ft.filesystem.directory_iterator


ft.filesystem.path <.. ft.filesystem.directory_iterator


ft.filesystem.path <.. ft.filesystem.directory_iterator::impl


ft.filesystem.path <.. ft.filesystem.filesystem_error


ft.filesystem.path <.. ft.filesystem.filesystem_error


ft.filesystem.path <.. ft.filesystem.filesystem_error


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path


ft.filesystem.path <.. ft.filesystem.path::iterator


ft.filesystem.perms <.. ft.filesystem.file_status


ft.filesystem.perms <.. ft.filesystem.file_status


ft.filesystem.perms <.. ft.filesystem.perms


ft.filesystem.perms <.. ft.filesystem.perms


ft.filesystem.perms <.. ft.filesystem.perms


ft.shared_ptr <.. ft.shared_ptr


ft.shared_ptr <.. ft.shared_ptr






/' Nested objects '/

http.Status +-- http.Status::StatusEnum


parser.http.TokenKind +-- parser.http.TokenKind::TokenKindEnum


parser.http.TokenKind +-- config.TokenKind::TokenKindEnum


.action +-- .action::actionEnum


ft.filesystem.directory_options +-- ft.filesystem.directory_options::directory_optionsEnum


ft.errc +-- ft.errc::errcEnum


ft.filesystem.file_type +-- ft.filesystem.file_type::file_typeEnum


ft.filesystem.perms +-- ft.filesystem.perms::permsEnum




@enduml
